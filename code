using System;
using System.Collections;
using System.Collections.Generic;
using System.Numerics;
namespace System.Fractions
{
    struct Fraction
    {
        public void Print()
        {
            Console.WriteLine(CreateFaction());

        }
        private int numerator;
        private int denominator;
        private string sim;

        public Fraction(int numerato, int denominato, string si = "|")
        {
            numerator = numerato;
            denominator = denominato;
            sim = si;
        }
        private object CreateFaction()
        {
            return numerator + sim + denominator;
        }
        public static Fraction operator +(Fraction f1, Fraction f2)
        {
            Fraction res = new Fraction(0, 0);
            if (f1.denominator == f2.denominator)
            {
                res = new Fraction(f1.numerator + f2.numerator, f1.denominator);
            }
            else
            {
                try { throw new Exception { }; }
                catch (Exception e)
                {
                    Console.WriteLine($"Wrong work : {e.TargetSite} ,{e.Message}, an error has occurred:{e.StackTrace}");
                }

            }
            return res;
        }
        public static Fraction operator -(Fraction f1, Fraction f2)
        {
            Fraction res = new Fraction(0, 0);
            if (f1.denominator == f2.denominator)
            {
                res = new Fraction(f1.numerator - f2.numerator, f1.denominator);
            }
            else
            {
                try { throw new Exception { }; }
                catch (Exception e)
                {
                    Console.WriteLine($"Wrong work: {e.TargetSite} ,{e.Message},an error has occurred:{e.StackTrace}");
                }

            }
            return res;
        }
        public static Fraction operator *(Fraction f1, Fraction f2)
        {

            return new Fraction(f1.numerator * f2.numerator, f1.denominator * f2.denominator); ;
        }
        public static Fraction operator /(Fraction f1, Fraction f2)
        {

            return new Fraction(f1.numerator * f2.denominator, f1.denominator * f2.numerator); ;
        }
        public double ToDouble()
        {
            string r = numerator.ToString();
            string e = denominator.ToString();
            double re = Convert.ToDouble(r);
            double es = Convert.ToDouble(e);
            double res = re / es;
            return res;
        }
        public int ToInt32()
        {
            int res = 0;
            if (numerator % denominator == 0)
            {
                string r = numerator.ToString();
                string e = denominator.ToString();
                int re = Convert.ToInt32(r);
                int es = Convert.ToInt32(e);
                res = re / es;

            }
            else
            {
                try { throw new Exception { }; }
                catch (Exception e)
                {
                    Console.WriteLine($"Wrong work : {e.TargetSite} ,{e.Message},  an error has occurred:{e.StackTrace}");
                }
            }
            return res;
        }
    }

}
